// import d3 from 'd3-scale-linear'; // should remove that

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
function scale(minIn, maxIn, minOut, maxOut) {
  var a = (maxOut - minOut) / (maxIn - minIn);
  var b = minOut - a * minIn;
  return function (x) {
    return a * x + b;
  };
}

function getRandomColor() {
  var letters = '56789ABCDEF'.split('');
  var color = '#';
  for (var i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * letters.length)];
  }
  return color;
}

var colorMap = ['#44C7F1', '#37C000', '#F5D900', '#F39300', '#EC5D57', '#B36AE2', '#00FDFF', '#FF80BE', '#CAFA79', '#FFFF64', '#FF9EFF', '#007AFF'];

var colors = '';

var Circle = (function () {
  function Circle(id, x, y, options) {
    _classCallCheck(this, Circle);

    this.id = id;
    this.x = x;
    this.y = y;

    this.opacity = options.opacity || 1;
    this.color = colorMap[(options.color || 0) % colorMap.length];

    this.growthVelocity = options.velocity || 50; // pixels / sec
    this.minVelocity = 50; // if gain is < 0.25 => constant growth
    this.friction = -50; // pixels / sec

    this.setDuration(options.duration);

    this.radius = 0;
    this.coordinates = {};
    this.isDead = false;
  }

  _createClass(Circle, [{
    key: 'setDuration',
    value: function setDuration(time) {
      this.lifeTime = time;

      this.opacityScale = scale(this.lifeTime, 0, this.opacity, 0);

      // this.opacityScale = d3.scale.linear()
      //   .domain([this.lifeTime, 0])
      //   .range([this.opacity, 0]);
    }
  }, {
    key: 'update',
    value: function update(dt, w, h) {
      // update coordinates - screen orientation
      this.coordinates.x = this.x * w;
      this.coordinates.y = this.y * h;

      this.lifeTime -= dt;
      this.opacity = this.opacityScale(this.lifeTime);

      if (this.growthVelocity > this.minVelocity) {
        this.growthVelocity += this.friction * dt;
      }

      this.radius += this.growthVelocity * dt;

      if (this.lifeTime < 0) {
        this.isDead = true;
      }
    }
  }, {
    key: 'draw',
    value: function draw(ctx) {
      if (this.isDead) {
        return;
      }

      ctx.save();
      ctx.beginPath();
      ctx.fillStyle = this.color;
      ctx.globalAlpha = this.opacity;
      ctx.arc(this.coordinates.x, this.coordinates.y, Math.round(this.radius), 0, Math.PI * 2, false);
      ctx.fill();
      ctx.closePath();
      ctx.restore();
    }
  }]);

  return Circle;
})();

exports['default'] = Circle;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR1c3pld3NraS9kZXYvY29zaW1hL2xpYi9zb3VuZHdvcmtzLWRyb3BzL3NyYy9jbGllbnQvcGxheWVyL3Zpc3VhbC9jaXJjbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7QUFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBLElBQUssS0FBSyxHQUFHLEtBQUssQ0FBQSxBQUFDLENBQUM7QUFDOUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDN0IsU0FBTyxVQUFBLENBQUM7V0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7R0FBQSxDQUFDO0NBQ3ZCOztBQUVELFNBQVMsY0FBYyxHQUFHO0FBQ3hCLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEMsTUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDMUIsU0FBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztHQUM5RDtBQUNELFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRUQsSUFBTSxRQUFRLEdBQUcsQ0FDZixTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQzFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFDMUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUMzQyxDQUFDOztBQUVGLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FB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QyxJQUFJLEVBQUUsQ0FBQztBQUNYLFNBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNoQixTQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDZjs7O1NBOURrQixNQUFNOzs7cUJBQU4sTUFBTSIsImZpbGUiOiIvVXNlcnMvbWF0dXN6ZXdza2kvZGV2L2Nvc2ltYS9saWIvc291bmR3b3Jrcy1kcm9wcy9zcmMvY2xpZW50L3BsYXllci92aXN1YWwvY2lyY2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IGQzIGZyb20gJ2QzLXNjYWxlLWxpbmVhcic7IC8vIHNob3VsZCByZW1vdmUgdGhhdFxuXG5mdW5jdGlvbiBzY2FsZShtaW5JbiwgbWF4SW4sIG1pbk91dCwgbWF4T3V0KSB7XG4gIGNvbnN0IGEgPSAobWF4T3V0IC0gbWluT3V0KSAvIChtYXhJbiAtIG1pbkluKTtcbiAgY29uc3QgYiA9IG1pbk91dCAtIGEgKiBtaW5JbjtcbiAgcmV0dXJuIHggPT4gYSAqIHggKyBiO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpIHtcbiAgY29uc3QgbGV0dGVycyA9ICc1Njc4OUFCQ0RFRicuc3BsaXQoJycpO1xuICBsZXQgY29sb3IgPSAnIyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgY29sb3IgKz0gbGV0dGVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsZXR0ZXJzLmxlbmd0aCldO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn1cblxuY29uc3QgY29sb3JNYXAgPSBbXG4gICcjNDRDN0YxJywgJyMzN0MwMDAnLCAnI0Y1RDkwMCcsICcjRjM5MzAwJyxcbiAgJyNFQzVENTcnLCAnI0IzNkFFMicsICcjMDBGREZGJywgJyNGRjgwQkUnLFxuICAnI0NBRkE3OScsICcjRkZGRjY0JywgJyNGRjlFRkYnLCAnIzAwN0FGRidcbl07XG5cbmxldCBjb2xvcnMgPSAnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2lyY2xlIHtcbiAgY29uc3RydWN0b3IoaWQsIHgsIHksIG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgdGhpcy5vcGFjaXR5ID0gb3B0aW9ucy5vcGFjaXR5IHx8IDE7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yTWFwWyhvcHRpb25zLmNvbG9yIHx8IDApICUgY29sb3JNYXAubGVuZ3RoXTtcblxuICAgIHRoaXMuZ3Jvd3RoVmVsb2NpdHkgPSBvcHRpb25zLnZlbG9jaXR5IHx8IDUwOyAvLyBwaXhlbHMgLyBzZWNcbiAgICB0aGlzLm1pblZlbG9jaXR5ID0gNTA7IC8vIGlmIGdhaW4gaXMgPCAwLjI1ID0+IGNvbnN0YW50IGdyb3d0aFxuICAgIHRoaXMuZnJpY3Rpb24gPSAtNTA7IC8vIHBpeGVscyAvIHNlY1xuXG4gICAgdGhpcy5zZXREdXJhdGlvbihvcHRpb25zLmR1cmF0aW9uKTtcblxuICAgIHRoaXMucmFkaXVzID0gMDtcbiAgICB0aGlzLmNvb3JkaW5hdGVzID0ge307XG4gICAgdGhpcy5pc0RlYWQgPSBmYWxzZTtcbiAgfVxuXG4gIHNldER1cmF0aW9uKHRpbWUpIHtcbiAgICB0aGlzLmxpZmVUaW1lID0gdGltZTtcblxuICAgIHRoaXMub3BhY2l0eVNjYWxlID0gc2NhbGUodGhpcy5saWZlVGltZSwgMCwgdGhpcy5vcGFjaXR5LCAwKTtcblxuICAgIC8vIHRoaXMub3BhY2l0eVNjYWxlID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAvLyAgIC5kb21haW4oW3RoaXMubGlmZVRpbWUsIDBdKVxuICAgIC8vICAgLnJhbmdlKFt0aGlzLm9wYWNpdHksIDBdKTtcbiAgfVxuXG4gIHVwZGF0ZShkdCwgdywgaCkge1xuICAgIC8vIHVwZGF0ZSBjb29yZGluYXRlcyAtIHNjcmVlbiBvcmllbnRhdGlvblxuICAgIHRoaXMuY29vcmRpbmF0ZXMueCA9IHRoaXMueCAqIHc7XG4gICAgdGhpcy5jb29yZGluYXRlcy55ID0gdGhpcy55ICogaDtcblxuICAgIHRoaXMubGlmZVRpbWUgLT0gZHQ7XG4gICAgdGhpcy5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5U2NhbGUodGhpcy5saWZlVGltZSk7XG5cbiAgICBpZiAodGhpcy5ncm93dGhWZWxvY2l0eSA+IHRoaXMubWluVmVsb2NpdHkpIHtcbiAgICAgIHRoaXMuZ3Jvd3RoVmVsb2NpdHkgKz0gKHRoaXMuZnJpY3Rpb24gKiBkdCk7XG4gICAgfVxuXG4gICAgdGhpcy5yYWRpdXMgKz0gdGhpcy5ncm93dGhWZWxvY2l0eSAqIGR0O1xuXG4gICAgaWYgKHRoaXMubGlmZVRpbWUgPCAwKSB7XG4gICAgICB0aGlzLmlzRGVhZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZHJhdyhjdHgpIHtcbiAgICBpZiAodGhpcy5pc0RlYWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSB0aGlzLm9wYWNpdHk7XG4gICAgY3R4LmFyYyh0aGlzLmNvb3JkaW5hdGVzLngsIHRoaXMuY29vcmRpbmF0ZXMueSwgTWF0aC5yb3VuZCh0aGlzLnJhZGl1cyksIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuIl19