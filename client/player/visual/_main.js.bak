// IS NOT USED ANYMORE
// KEEP TRACK OF UNUSED METHODS (`updateDuration`, `clear` and `makeButton`)

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _loop = require('./loop');

var _loop2 = _interopRequireDefault(_loop);

var _circle = require('./circle');

var _circle2 = _interopRequireDefault(_circle);

var _colorMap = require('./color-map');

var _colorMap2 = _interopRequireDefault(_colorMap);

// globals
var w = undefined,
    h = undefined;
// create canvas
var $canvas = undefined;
var ctx = undefined;

var setSize = function setSize() {
  // var style = window.getComputedStyle($canvas);
  // w = style.getPropertyValue('width');
  // h = style.getPropertyValue('height');
  w = window.innerWidth;
  h = window.innerHeight;
  ctx.canvas.width = w;
  ctx.canvas.height = h;
};

// store displayed circles
var circles = [];

// main loop functions
// const update = function(dt) {
//   // update and remove dead circles - avoid skipping next element when removing element
//   // http://stackoverflow.com/questions/16352546/how-to-iterate-over-an-array-and-remove-elements-in-javascript
//   for (let i = circles.length - 1; i >= 0; i--) {
//     const circle = circles[i];
//     circle.update(dt, w, h);

//     if (circle.isDead) { circles.splice(i, 1); }
//   }
// };

// const render = function(dt) {
//   ctx.fillStyle = '#000';
//   ctx.fillRect(0, 0, w, h);

//   for (var i = 0; i < circles.length; i++) {
//     circles[i].draw(ctx, dt);
//   }
// };

// game loop
var options = {
  ctx: ctx,
  buffers: [],
  update: update,
  render: render,
  fps: 60
  // gui: gui.model
};

exports['default'] = {
  // create a new circle
  // createCircle: function(message) {
  //   const circle = new Circle(message);
  //   circles.push(circle);
  //   return circle.id;
  // },

  // update a displayed circle lifetime
  updateDuration: function updateDuration(circleId, duration) {
    var target = undefined;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(circles), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var circle = _step.value;

        if (circle.id !== circleId) {
          continue;
        }
        target = circle;
        break;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!target) {
      return false;
    }

    target.setDuration(time);
  },

  // // start animation
  // start: function() {
  //   $canvas = document.querySelector('#scene');
  //   ctx = $canvas.getContext('2d');

  //   // apply window size to canvas - update globals
  //   setSize();
  //   window.addEventListener('resize', setSize);

  //   loop.run(options);
  // },

  // remove(index) {
  //   for (let circle of circles) {
  //     if (circle.index === index)
  //       circle.isDead = true;
  //   }
  // },

  clear: function clear() {
    circles = [];
  },

  makeButton: function makeButton(container, index, x, y, func) {
    var posX = x * w;
    var posY = y * h;

    var el = document.createElement('div');
    el.classList.add('button');
    el.style.left = posX + 'px';
    el.style.top = posY + 'px';
    el.style.backgroundColor = _colorMap2['default'][index % _colorMap2['default'].length];

    el.addEventListener('touchstart', function onTouchStart(e) {
      e.preventDefault();
      el.removeEventListener(onTouchStart);
      func(index, x, y);
      container.removeChild(el);
    });

    container.appendChild(el);
  }

};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGllbnQvcGxheWVyL3Zpc3VhbC9fbWFpbi5qcy5iYWsiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztvQkFHaUIsUUFBUTs7OztzQkFDTixVQUFVOzs7O3dCQUNSLGFBQWE7Ozs7O0FBR2xDLElBQUksQ0FBQyxZQUFBO0lBQUUsQ0FBQyxZQUFBLENBQUM7O0FBRVQsSUFBSSxPQUFPLFlBQUEsQ0FBQztBQUNaLElBQUksR0FBRyxZQUFBLENBQUM7O0FBRVIsSUFBTSxPQUFPLEdBQUcsU0FBVixPQUFPLEdBQWM7Ozs7QUFJekIsR0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDdEIsR0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdkIsS0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLEtBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztDQUN2QixDQUFDOzs7QUFHRixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCakIsSUFBTSxPQUFPLEdBQUc7QUFDZCxLQUFHLEVBQUUsR0FBRztBQUNSLFNBQU8sRUFBRSxFQUFFO0FBQ1gsUUFBTSxFQUFFLE1BQU07QUFDZCxRQUFNLEVBQUUsTUFBTTtBQUNkLEtBQUcsRUFBRSxFQUFFOztDQUVSLENBQUM7O3FCQUVhOzs7Ozs7Ozs7QUFTYixnQkFBYyxFQUFFLHdCQUFTLFFBQVEsRUFBRSxRQUFRLEVBQUU7QUFDM0MsUUFBSSxNQUFNLFlBQUEsQ0FBQzs7Ozs7OztBQUVYLHdDQUFtQixPQUFPLDRHQUFFO1lBQW5CLE1BQU07O0FBQ2IsWUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLFFBQVEsRUFBRTtBQUFFLG1CQUFTO1NBQUU7QUFDekMsY0FBTSxHQUFHLE1BQU0sQ0FBQztBQUNoQixjQUFNO09BQ1A7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRCxRQUFJLENBQUMsTUFBTSxFQUFFO0FBQUUsYUFBTyxLQUFLLENBQUM7S0FBRTs7QUFFOUIsVUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJELE9BQUssRUFBQSxpQkFBRztBQUNOLFdBQU8sR0FBRyxFQUFFLENBQUM7R0FDZDs7QUFFRCxZQUFVLEVBQUEsb0JBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRTtBQUN2QyxRQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLFFBQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRW5CLFFBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsTUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0IsTUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUM1QixNQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQzNCLE1BQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLHNCQUFTLEtBQUssR0FBRyxzQkFBUyxNQUFNLENBQUMsQ0FBQzs7QUFFN0QsTUFBRSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxTQUFTLFlBQVksQ0FBQyxDQUFDLEVBQUU7QUFDekQsT0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ25CLFFBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxVQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQixlQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzNCLENBQUMsQ0FBQzs7QUFFSCxhQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQzNCOztDQUVGIiwiZmlsZSI6InNyYy9jbGllbnQvcGxheWVyL3Zpc3VhbC9fbWFpbi5qcy5iYWsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJUyBOT1QgVVNFRCBBTllNT1JFXG4vLyBLRUVQIFRSQUNLIE9GIFVOVVNFRCBNRVRIT0RTIChgdXBkYXRlRHVyYXRpb25gLCBgY2xlYXJgIGFuZCBgbWFrZUJ1dHRvbmApXG5cbmltcG9ydCBsb29wIGZyb20gJy4vbG9vcCc7XG5pbXBvcnQgQ2lyY2xlIGZyb20gJy4vY2lyY2xlJztcbmltcG9ydCBjb2xvck1hcCBmcm9tICcuL2NvbG9yLW1hcCc7XG5cbi8vIGdsb2JhbHNcbmxldCB3LCBoO1xuLy8gY3JlYXRlIGNhbnZhc1xubGV0ICRjYW52YXM7XG5sZXQgY3R4O1xuXG5jb25zdCBzZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIC8vIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCRjYW52YXMpO1xuICAvLyB3ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKTtcbiAgLy8gaCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpO1xuICB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gIGggPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIGN0eC5jYW52YXMud2lkdGggPSB3O1xuICBjdHguY2FudmFzLmhlaWdodCA9IGg7XG59O1xuXG4vLyBzdG9yZSBkaXNwbGF5ZWQgY2lyY2xlc1xubGV0IGNpcmNsZXMgPSBbXTtcblxuLy8gbWFpbiBsb29wIGZ1bmN0aW9uc1xuLy8gY29uc3QgdXBkYXRlID0gZnVuY3Rpb24oZHQpIHtcbi8vICAgLy8gdXBkYXRlIGFuZCByZW1vdmUgZGVhZCBjaXJjbGVzIC0gYXZvaWQgc2tpcHBpbmcgbmV4dCBlbGVtZW50IHdoZW4gcmVtb3ZpbmcgZWxlbWVudFxuLy8gICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE2MzUyNTQ2L2hvdy10by1pdGVyYXRlLW92ZXItYW4tYXJyYXktYW5kLXJlbW92ZS1lbGVtZW50cy1pbi1qYXZhc2NyaXB0XG4vLyAgIGZvciAobGV0IGkgPSBjaXJjbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4vLyAgICAgY29uc3QgY2lyY2xlID0gY2lyY2xlc1tpXTtcbi8vICAgICBjaXJjbGUudXBkYXRlKGR0LCB3LCBoKTtcblxuLy8gICAgIGlmIChjaXJjbGUuaXNEZWFkKSB7IGNpcmNsZXMuc3BsaWNlKGksIDEpOyB9XG4vLyAgIH1cbi8vIH07XG5cbi8vIGNvbnN0IHJlbmRlciA9IGZ1bmN0aW9uKGR0KSB7XG4vLyAgIGN0eC5maWxsU3R5bGUgPSAnIzAwMCc7XG4vLyAgIGN0eC5maWxsUmVjdCgwLCAwLCB3LCBoKTtcblxuLy8gICBmb3IgKHZhciBpID0gMDsgaSA8IGNpcmNsZXMubGVuZ3RoOyBpKyspIHtcbi8vICAgICBjaXJjbGVzW2ldLmRyYXcoY3R4LCBkdCk7XG4vLyAgIH1cbi8vIH07XG5cbi8vIGdhbWUgbG9vcFxuY29uc3Qgb3B0aW9ucyA9IHtcbiAgY3R4OiBjdHgsXG4gIGJ1ZmZlcnM6IFtdLFxuICB1cGRhdGU6IHVwZGF0ZSxcbiAgcmVuZGVyOiByZW5kZXIsXG4gIGZwczogNjBcbiAgLy8gZ3VpOiBndWkubW9kZWxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gY3JlYXRlIGEgbmV3IGNpcmNsZVxuICAvLyBjcmVhdGVDaXJjbGU6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgLy8gICBjb25zdCBjaXJjbGUgPSBuZXcgQ2lyY2xlKG1lc3NhZ2UpO1xuICAvLyAgIGNpcmNsZXMucHVzaChjaXJjbGUpO1xuICAvLyAgIHJldHVybiBjaXJjbGUuaWQ7XG4gIC8vIH0sXG5cbiAgLy8gdXBkYXRlIGEgZGlzcGxheWVkIGNpcmNsZSBsaWZldGltZVxuICB1cGRhdGVEdXJhdGlvbjogZnVuY3Rpb24oY2lyY2xlSWQsIGR1cmF0aW9uKSB7XG4gICAgbGV0IHRhcmdldDtcblxuICAgIGZvciAobGV0IGNpcmNsZSBvZiBjaXJjbGVzKSB7XG4gICAgICBpZiAoY2lyY2xlLmlkICE9PSBjaXJjbGVJZCkgeyBjb250aW51ZTsgfVxuICAgICAgdGFyZ2V0ID0gY2lyY2xlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICB0YXJnZXQuc2V0RHVyYXRpb24odGltZSk7XG4gIH0sXG5cbiAgLy8gLy8gc3RhcnQgYW5pbWF0aW9uXG4gIC8vIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgLy8gICAkY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NjZW5lJyk7XG4gIC8vICAgY3R4ID0gJGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIC8vICAgLy8gYXBwbHkgd2luZG93IHNpemUgdG8gY2FudmFzIC0gdXBkYXRlIGdsb2JhbHNcbiAgLy8gICBzZXRTaXplKCk7XG4gIC8vICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHNldFNpemUpO1xuXG4gIC8vICAgbG9vcC5ydW4ob3B0aW9ucyk7XG4gIC8vIH0sXG5cbiAgLy8gcmVtb3ZlKGluZGV4KSB7XG4gIC8vICAgZm9yIChsZXQgY2lyY2xlIG9mIGNpcmNsZXMpIHtcbiAgLy8gICAgIGlmIChjaXJjbGUuaW5kZXggPT09IGluZGV4KVxuICAvLyAgICAgICBjaXJjbGUuaXNEZWFkID0gdHJ1ZTtcbiAgLy8gICB9XG4gIC8vIH0sXG5cbiAgY2xlYXIoKSB7XG4gICAgY2lyY2xlcyA9IFtdO1xuICB9LFxuXG4gIG1ha2VCdXR0b24oY29udGFpbmVyLCBpbmRleCwgeCwgeSwgZnVuYykge1xuICAgIGNvbnN0IHBvc1ggPSB4ICogdztcbiAgICBjb25zdCBwb3NZID0geSAqIGg7XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbicpO1xuICAgIGVsLnN0eWxlLmxlZnQgPSBwb3NYICsgJ3B4JztcbiAgICBlbC5zdHlsZS50b3AgPSBwb3NZICsgJ3B4JztcbiAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvck1hcFtpbmRleCAlIGNvbG9yTWFwLmxlbmd0aF07XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIob25Ub3VjaFN0YXJ0KTtcbiAgICAgIGZ1bmMoaW5kZXgsIHgsIHkpO1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGVsKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gIH1cblxufTtcbiJdfQ==